[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "semiconductor-defect-detection"
version = "0.1.0"
description = "CNN-based semiconductor wafer defect detection system using Keras"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "LifeIsMoment", email = "your-email@example.com"}
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
requires-python = ">=3.9"
dependencies = [
    "tensorflow>=2.15.0,<2.16.0",
    "keras>=2.15.0",
    "numpy>=1.24.0,<2.0.0",
    "pillow>=10.0.0",
    "pyyaml>=6.0",
    "tqdm>=4.65.0",
    "matplotlib>=3.7.0",
    "seaborn>=0.12.0",
    "pandas>=2.0.0",
    "scikit-learn>=1.3.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.11.0",
    "black>=23.7.0",
    "flake8>=6.0.0",
    "isort>=5.12.0",
    "mypy>=1.5.0",
    "pre-commit>=3.3.0",
    "bandit>=1.7.5",
    "jupyter>=1.0.0",
]
experiment = [
    "wandb>=0.15.0",
    "tensorboard>=2.15.0",
    "plotly>=5.15.0",
    "optuna>=3.3.0",
]
gpu = [
    "tensorflow[and-cuda]>=2.15.0",
]

[project.urls]
Homepage = "https://github.com/LifeIsMoment/keras-"
Repository = "https://github.com/LifeIsMoment/keras-.git"
Documentation = "https://github.com/LifeIsMoment/keras-/blob/main/README.md"
"Bug Tracker" = "https://github.com/LifeIsMoment/keras-/issues"

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-data]
"*" = ["*.yaml", "*.yml", "*.json"]

# Black configuration
[tool.black]
line-length = 88
target-version = ['py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | venv
  | venv311
  | _build
  | buck-out
  | build
  | dist
  | data
  | checkpoints
)/
'''

# isort configuration
[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
known_first_party = ["src"]
known_third_party = ["tensorflow", "keras", "numpy", "pandas", "matplotlib", "seaborn", "PIL", "sklearn", "yaml", "tqdm"]

# MyPy configuration
[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "tensorflow.*",
    "keras.*",
    "sklearn.*",
    "PIL.*",
    "cv2.*",
    "matplotlib.*",
    "seaborn.*",
    "plotly.*",
    "wandb.*",
    "tqdm.*",
]
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-v",
    "--strict-markers",
    "--strict-config",
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "gpu: marks tests that require GPU",
]

# Coverage configuration
[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/venv311/*",
    "setup.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

# Bandit security configuration
[tool.bandit]
exclude_dirs = ["tests", "venv", "venv311", ".venv", "build", "dist"]
skips = ["B101", "B601"]  # Skip assert_used and shell injection (for specific cases)

[tool.bandit.assert_used]
skips = ["**/test_*.py", "**/tests/*.py"]

# Flake8 configuration (in setup.cfg since flake8 doesn't support pyproject.toml yet)
# See .flake8 or setup.cfg for flake8 configuration
